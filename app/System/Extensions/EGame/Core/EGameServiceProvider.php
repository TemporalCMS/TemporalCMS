<?php

namespace App\System\Extensions\EGame\Core;

use Illuminate\Contracts\Http\Kernel;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\ServiceProvider;

abstract class EGameServiceProvider extends ServiceProvider {

    protected $egameName;
    protected $routeNamespace;
    protected $eid;

    protected $middleware = [];

    protected $middlewareGroups = [];

    protected $middlewarePriority = [];

    protected $middlewareRoute = [];

    public function __construct($app)
    {
        $this->eid = egame()->getConfig('id');

        parent::__construct($app);
    }

    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
    }

    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
    }

    /**
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     */
    protected function registerAllMiddlewares()
    {
        $this->addMiddleware($this->middleware);
        $this->addMiddlewareGroup($this->middlewareGroups);
        $this->addMiddlewarePriority($this->middlewarePriority);
        $this->addMiddlewareRoute($this->middlewareRoute);
    }

    /**
     * @param $middleware
     * @param bool $prepend
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     */
    protected function addMiddleware($middleware, bool $prepend = false)
    {
        $middlewares = is_array($middleware) ? $middleware : [$middleware];

        $kernel = $this->app->make(Kernel::class);

        foreach ($middlewares as $middleware) {
            if ($prepend) {
                $kernel->prependMiddleware($middleware);
            } else {
                $kernel->pushMiddleware($middleware);
            }
        }
    }

    /**
     * @param $name
     * @param array $middleware
     */
    protected function addMiddlewareGroup($name, $middleware = [])
    {
        $middlewares = is_array($name) ? $name : [$name => $middleware];

        foreach ($middlewares as $key => $middleware) {
            $this->app['router']->middlewareGroup($key, $middleware);
        }
    }

    /**
     * @param $middleware
     */
    protected function addMiddlewarePriority($middleware)
    {
        $middlewares = is_array($middleware) ? $middleware : [$middleware];

        foreach ($middlewares as $middleware) {
            $this->app['router']->middlewarePriority[] = $middleware;
        }
    }

    /**
     * @param $name
     * @param array $middleware
     */
    protected function addMiddlewareRoute($name, $middleware = [])
    {
        $middlewares = is_array($name) ? $name : [$name => $middleware];

        foreach ($middlewares as $k => $middleware) {
            $this->app['router']->aliasMiddleware($k, $middleware);
        }
    }

    /**
     * @return mixed
     */
    protected function registerAdminNavbar()
    {
        $navAdminFile = collect(include $this->getPath('src/Config/NavAdmin.php'));

        if($navAdminFile->isEmpty())
            return $this->app['egame.navbar.admin']->getNavbarList();

        return $this->app['egame.navbar.admin']->addNavbar($navAdminFile->toArray());
    }

    /**
     * @return ServiceProvider
     */
    protected function loadRoutes()
    {
        Route::middleware(['web', 'ICheck'])
            ->namespace($this->routeNamespace)
            ->group($this->getPath("src/routes.php"));

        Route::middleware(['api'])
            ->namespace($this->routeNamespace)
            ->group($this->getPath("src/api.php"));
    }

    /**
     * Load all views
     */
    protected function loadViews()
    {
        parent::loadViewsFrom($this->getPath("resources/views"), "egame");
    }

    /**
     * Load translations
     */
    protected function loadTranslations()
    {
        parent::loadTranslationsFrom(extensions_path("EGames/" . egame()->getFolderName() . "/resources/lang"), "egame");
    }

    /**
     * Load all migrations
     */
    protected function loadMigrations()
    {
        parent::loadMigrationsFrom($this->getPath("src/DataBase/migrations"));
    }

    /**
     * Load all factories
     */
    protected function loadFactories()
    {
        parent::loadFactoriesFrom($this->getPath("src/DataBase/factories")); // TODO: Change the autogenerated stub
    }

    /**
     * @param $key
     * @return mixed
     */
    protected function getEGameConfig($key, $arr = false)
    {
        return egame()->getConfig($key, $arr);
    }

    /**
     * @param $folder
     * @return string
     */
    protected function getPath($folder)
    {
        return extensions_path("EGames/" . $this->egameName . "/" . $folder);
    }

}